.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "THRUST 1"
.TH THRUST 1 "2006-01-09" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
Thrust \- a rewrite of the C64 classic
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBthrust\fR [\-\-help] [\-\-version] [\-\-nodemo] [\-\-nosoundeffects]
[\-\-gamma=Value] [\-\-step] [\-\-double] [\-\-ggitarget=TARGET]
.PP
\&\fBxthrust\fR [\-\-help] [\-\-version] [\-\-nodemo] [\-\-nosoundeffects]
[\-\-gamma=Value] [\-\-step] [\-\-noshm] [\-\-double] [\-display display\-name]
[\-geometry=geometry\-spec]
.PP
\&\fBdxthrust\fR [\-\-help] [\-\-version] [\-\-nodemo] [\-\-nosoundeffects]
[\-\-gamma=Value] [\-\-step]
.PP
\&\fBsvgathrust\fR [\-\-help] [\-\-version] [\-\-nodemo] [\-\-nosoundeffects]
[\-\-gamma=Value] [\-\-step] [\-\-svgamode=MODE]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a rewrite of Thrust, the classic Commodore 64 game, to un*x and
Windows.
.PP
The object of the game is to lift the \fBKlystron Pod\fR from the bottom
of a cave and return it safely to space. The \fBPod\fR is very heavy
(compared to the ship) and this makes it tougher than it may seem.
.PP
You must be careful not to run out of fuel, crash into the cave
walls, or let the enemy artillary outposts shoot you down.
.SH "BACKGOUND STORY"
.IX Header "BACKGOUND STORY"
The resistance is about to launch a major offensive against the Intergalactic
Empire. In preparation for this, they have captured several battle-grade
starships, but they lack the essential power sources for these formidable
craft; \fBKlystron Pods\fR.
.PP
You have been commissioned by resistance to steal these pods from the Empire's
storage planets. Each planet is defended by a battery of \fBLimpet Guns\fR,
powered by a \fBNuclear Power Plant\fR. By firing shots at the power plant,
the guns can be temporarily disabled; the more shots fired at the nuclear
reactor, the longer the guns will take to recharge.
.PP
\&\fB\s-1BUT\s0 \s-1BEWARE\s0!!\fR If you fire too many shots at the reactor, it will become
critical, giving you just ten seconds to clear the plantet before it is
destroyed. If you have not already retrieved the pod stored at the planet,
then you will have failed the mission. If you have retrieved the pod, and you
manage to send the reactor into its critical phase, and leave the planet
safely, you will receive a hefty bonus.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fI\-h, \-\-help\fR" 5
.IX Item "-h, --help"
Print a usage message and exit with a non-zero status.
.IP "\fI\-v, \-\-version\fR" 5
.IX Item "-v, --version"
Print version information on standard output, then exit.
.IP "\fI\-d, \-\-nodemo\fR" 5
.IX Item "-d, --nodemo"
Do not run the demo which is otherwise displayed if the game is left
untouched.
.IP "\fI\-e, \-\-nosoundeffects\fR" 5
.IX Item "-e, --nosoundeffects"
If sound is compiled in, be silent anyway.
.IP "\fI\-c, \-\-gamma=Value\fR" 5
.IX Item "-c, --gamma=Value"
Change the brightness of the colors. 1.0 is the default. Higher values
give brighter colors. The value must be positive.
.IP "\fI\-j, \-\-jump\fR" 5
.IX Item "-j, --jump"
Only draw every third frame. This makes the game a lot faster.
.IP "\fI\-t, \-\-ggitarget=TARGET\fR" 5
.IX Item "-t, --ggitarget=TARGET"
This option is only applicable to the \s-1GGI\s0 version of Thrust.
.Sp
The \s-1GGI\s0 target to use, which can also be specified with the \s-1GGI_DISPLAY\s0
environment variable. E.g. \fI\-\-ggitarget=directx:\-fullscreen\fR. See the \s-1GGI\s0
documentation for full details on \s-1GGI\s0 targets.
.IP "\fI\-2, \-\-double\fR" 5
.IX Item "-2, --double"
This option is only applicable to the \s-1GGI\s0 version and the X version of Thrust.
.Sp
Double the size of the window. This makes the game slow.
.IP "\fI\-display display-name\fR" 5
.IX Item "-display display-name"
.PD 0
.IP "\fI\-geometry geometry-spec\fR" 5
.IX Item "-geometry geometry-spec"
.PD
These options (\-display and \-geometry) are only applicable to the X version
of Thrust. Se the man page of X for details.
.IP "\fI\-m, \-\-noshm\fR" 5
.IX Item "-m, --noshm"
This option is only applicable to the X version of Thrust.
.Sp
Do not try to share memory between Thrust and the X server.
.IP "\fI\-s, \-\-svgamode=MODE\fR" 5
.IX Item "-s, --svgamode=MODE"
This option is only applicable to the SVGAlib version of Thrust.
.Sp
The format of svgamode is G<width>x<height>x<colors> where
<width>x<height> is at least 320x200 and <colors> has to be 256. Also,
the mode cannot be \fIplanar\fR. See the SVGAlib documentation for details
on this. The default is G320x200x256. There has been success with modes
G320x200x256, G640x480x256, G800x600x256 and G1024x768x256.
.SH "CONTROLS"
.IX Header "CONTROLS"
Note that the following keys are the default configuration. This can be
changed by the user by creating a file named .thrustrc in the users home
directory.
.IP "\fIA\fR" 5
.IX Item "A"
Turn counterclockwise
.IP "\fIS\fR" 5
.IX Item "S"
Turn clockwise
.IP "\fIEnter\fR" 5
.IX Item "Enter"
Fire
.Sp
Shoots a bullet. Different targets have different effect:
.Sp
The \fBFuel Tank\fR explodes for 150 points.
.Sp
The \fBLimpet guns\fR expolde for 750 points.
.Sp
The \fBNuclear Power Plant\fR can take a number of hits. When they are
destroyed you are given a short period of time to clear out before
the whole neighbourhood is nuked. If a \fBPower Plant\fR is hit \- but
not destoyed \- it will recover after a period of time. During this
recovery period, the \fBLimpet guns\fR are not able to fire. 2000 extra
points are scored if the \fBPower Plant\fR is destroyed when the level
is finished. There is exactly one \fBPower Plant\fR in every level.
.Sp
In the more advanced levels you will find other things to shoot at.
.IP "\fIRight-Ctrl\fR (\fIRight-Shift\fR on \s-1MSDOG\s0)" 5
.IX Item "Right-Ctrl (Right-Shift on MSDOG)"
Thrust
.Sp
Gives the ship a forward push at the cost of some fuel.
.IP "\fISpacebar\fR" 5
.IX Item "Spacebar"
Pick up and shield.
.Sp
If the ship is above a \fBFuel Tank\fR the ship is refueled, i.e the fuel
is picked up. Two vertical bars are drawn to indicate that fuel is
picked up. When there is no more fuel left in the tank, it disappears
and 300 points are scored.
.Sp
If the ship is close to the \fBKlystron Pod\fR a connecting wire is drawn. The
Pod is picked up when the connecting wire is of the right
length. If \fIspacebar\fR is released before the correct distance is reached
the Pod is not picked up.
.Sp
When the shield is activated, a circle is drawn around the ship. If
the ship is carrying the Pod, the Pod and the wire are also
protected by the shield. The shield costs fuel to power.
.IP "\fI\s-1ESC\s0\fR/\fIQ\fR" 5
.IX Item "ESC/Q"
Quit the game
.IP "\fIP\fR" 5
.IX Item "P"
Pause
.IP "\fIC\fR" 5
.IX Item "C"
Continue a paused game
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The .thrustrc file
.PP
Each command can be customized for either X11 or the SVGAlib (console)
versions by specifying the appropriate prefix, X11\- or \s-1SVGA\-\s0, followed
by the command, and the key to be assigned. Numpad keys can be assigned
using KP_[number], and control, shift and alt keys can be assigned
using [key]_[direction].
.PP
Valid commands:
.IP "counterclockwise" 5
.IX Item "counterclockwise"
.PD 0
.IP "clockwise" 5
.IX Item "clockwise"
.IP "thrust" 5
.IX Item "thrust"
.IP "fire" 5
.IX Item "fire"
.IP "pickup" 5
.IX Item "pickup"
.PD
.PP
Examples:
.IP "X11\-counterclockwise    a" 5
.IX Item "X11-counterclockwise    a"
.PD 0
.IP "X11\-clockwise           \s-1KP_6\s0" 5
.IX Item "X11-clockwise           KP_6"
.IP "SVGA-thrust             Shift_L" 5
.IX Item "SVGA-thrust             Shift_L"
.IP "SVGA-fire               space" 5
.IX Item "SVGA-fire               space"
.IP "SVGA-pickup             \s-1KP_0\s0" 5
.IX Item "SVGA-pickup             KP_0"
.PD
.SH "FILES"
.IX Header "FILES"
\&\fIthrust.highscore\fR in the configured shared state dir.
.PP
\&\fI${\s-1HOME\s0}/.thrustrc\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
Game by Peter Ekberg \fIpeda@lysator.liu.se\fR.
.PP
Original man page by Joey Hess \fIjoey@kitenet.net\fR.
.PP
Thanks go out to the authors of the original for the C64.
.SH "DISTRIBUTION"
.IX Header "DISTRIBUTION"
Thrust may be copied under the term of the Gnu General Public Licence.
.SH "BUGS"
.IX Header "BUGS"
Who knows?
